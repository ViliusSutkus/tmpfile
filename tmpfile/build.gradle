group = 'com.viliussutkus89'

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30

        versionCode 17
        versionName rootProject.version

        archivesBaseName = rootProject.name

        consumerProguardFiles 'proguard-rules.pro'
    }
    ndkVersion "22.0.7026061"
    externalNativeBuild.cmake.path "src/main/cpp/CMakeLists.txt"
    defaultConfig.externalNativeBuild.cmake.arguments "-DANDROID_STL=none"
    packagingOptions.exclude("**libtmpfile.so")

    buildFeatures.prefabPublishing true
    prefab {
        tmpfile.headers "src/main/cpp/include"
    }
}

configurations {
    javadocDependenciesToObtainClasspath
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    javadocDependenciesToObtainClasspath 'androidx.annotation:annotation:1.1.0'
}

task sourceJar(type: Jar) {
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("cpp", { from fileTree(dir: "src/main/cpp/") } )
    archiveBaseName = rootProject.name
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDependenciesToObtainClasspath
    title = "${rootProject.name} ${project.version} API"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId rootProject.name
                version = rootProject.version

                artifact sourceJar
                artifact javadocJar

                pom {
                    name = rootProject.name
                    description = 'tmpfile function overload for broken implementations'
                    url = 'https://github.com/ViliusSutkus89/tmpfile-Android'
                    packaging = 'aar'
                    inceptionYear = '2019'
                    licenses {
                        license {
                            name = 'The GNU General Public License, Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = "ViliusSutkus89"
                            name = "Vilius Sutkus"
                            email = "ViliusSutkus89@gmail.com"
                        }
                    }
                    scm {
                        url = 'https://github.com/ViliusSutkus89/tmpfile-Android'
                        connection = 'https://github.com/ViliusSutkus89/tmpfile-Android.git'
                    }
                }
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included in the pom.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    // This may look ugly...
    // but useInMemoryPgpKeys expects valid keys even with required { false }
    if (System.getenv('SIGNING_KEY')) {
        signing {
            required { true }
            useInMemoryPgpKeys(System.getenv('SIGNING_KEY'), System.getenv('SIGNING_PASS'))
            sign publishing.publications.release
        }
    }
}
